function [eampl,edamp,egauss,efreq,ephas,eeddy] = ...    calculate_CR_bounds(ampl,damp,freq,phas,gauss,eddy,t,sigma2,dbase,...                        filter_information,loline,galine,voline);% Function that calculates the CR bounds for the variables% of a weighted sum of exponentially damped signals from a database of the form%         K% x(t) = sum ampl(k) * exp(-damp(k)*t + freq(k)*t + phas(k)) * dbase(t,k)%        i=1%% Input arguments:% % ampl  - true amplitudes         (length K)% damp  - true dampings  (>0)     (length K)% freq  - true frequencies        (length K)% phas  - true phase shifts       (length K)%  t    - vector of time instants (length T) % sigma2- variance(s) of the additive noise on true signal%%% Output arguments:% % eampl  - CR bounds on amplitudes% edamp  - CR bounds on dampings% egausg - CR bounds on gaussian dampings% efreq  - CR bounds on frequencies% ephas  - CR bounds on phases% eeddy  - CR bounds on eddy current corrections%% If sigma2 is a vector of variances, then eampl,edamp,efreq,ephas% are matrices of size K x length(sigma2). Thus, each column i% corresponds to the variance sigma2(i).% Diana Sima, KUL-ESAT, May 2005[nrp,nrbasis] = size(dbase);for i = 1:nrbasis  A(:,i) = dbase(:,i).* ...           (exp(j*phas(i)+(-damp(i)-gauss(i).*t+j*(freq(i)+eddy(i).*t)).*t)).';end% computation of the Jacobiannra = 0; % first index for ampl in the Jacobianif loline  nrd = nrbasis; nrf = 2*nrbasis; nrph = 3*nrbasis; nre = 4*nrbasis;elseif galine   nrg = nrbasis; nrf = 2*nrbasis; nrph = 3*nrbasis; nre = 4*nrbasis;elseif voline  nrd = nrbasis; nrg = 2*nrbasis; nrf = 3*nrbasis;   nrph = 4*nrbasis; nre = 5*nrbasis;endJtemp = zeros(nrp,nre+nrbasis);for i = 1:nrbasis    % derivative wrt amplitude    Jtemp(:,i+nra) = A(:,i);    if (loline | voline)      % derivative wrt damping      Jtemp(:,i+nrd) = -A(:,i)*ampl(i).*t';    elseif (galine | voline)      % derivative wrt gaussian part damping      Jtemp(:,i+nrg) = -A(:,i)*ampl(i).*(t.^2)';        end    % derivative wrt frequency    Jtemp(:,i+nrf) = j*A(:,i)*ampl(i).*t';    % derivative wrt phase    Jtemp(:,i+nrph) = j*A(:,i)*ampl(i);    %derivative wrt e - residual eddy current effect    Jtemp(:,i+nre) = j*A(:,i)*ampl(i).*(t.^2)';endJc = filtering(Jtemp,filter_information,t);[size1J,size2J]     = size(Jc);J(1:2:2*size1J-1,:) = real(Jc);J(2:2:2*size1J,:)   = imag(Jc);% compute upper triangular factor of JR = qr(J); R = triu(R); R(size2J+1:end,:) = []; % compute Cramer-Rao matrix as the inverse of the Fisher% information matrix Jr'*Jr = R'*RCRmatrix = R\(R'\eye(size2J));% retrieve CR bounds for each parameter and each variance valuei = 1:nrbasis;eampl = sqrt(diag(CRmatrix(i,i))            * sigma2');if (loline | voline)  edamp  = sqrt(diag(CRmatrix(i+nrd,i+nrd)) * sigma2');  egauss = zeros(nrbasis,1);elseif (galine | voline)  edamp  = zeros(nrbasis,1);  egauss = sqrt(diag(CRmatrix(i+nrg,i+nrg)) * sigma2');endefreq = sqrt(diag(CRmatrix(i+nrf,i+nrf))    * sigma2');ephas = sqrt(diag(CRmatrix(i+nrph,i+nrph))  * sigma2');eeddy = sqrt(diag(CRmatrix(i+nre,i+nre))    * sigma2');