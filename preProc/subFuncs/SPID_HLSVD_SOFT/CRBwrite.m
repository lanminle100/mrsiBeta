function CRBwrite(orig_signal,type,flow,fhigh,ripple,Morder,filesavetof);global damp phase step%matlab versionvers = version;mvers = str2double(vers(1:3));% reading original signaleval(['load ',orig_signal])  %simulation file  = original filecompNames1 = cellstr(compNames);rCN = size(compNames,1); %number of components% reading databaseif mvers >=7    if isunix	%change the path to correspond to the OS (Unix or Windows)        invitrof = regexprep(invitrof,'\' , '/')    else        invitrof = regexprep(invitrof,'/' , '\')    endend %end mvers>=7a=whos('-file',invitrof);b={a.name};index=find(~(strcmp(b,'B0')|strcmp(b,'begin')|strcmp(b,'frequency')|strcmp(b,'ndp')|strcmp(b,'nucleus')|strcmp(b,'numberOfComponents')|strcmp(b,'step')));name=b(index);compNames2 = name';eval(['load ', invitrof]);% we assume that the simulated signal is composed of less signals than the% databasefor i=1:rCN    indexname(i)=strmatch(compNames1(i),compNames2,'exact');end% database constructionfor i=1:rCN    if size(eval(char(compNames2(indexname(i)))),1)==1        met_prof(:,i) = eval(char(compNames2(indexname(i)))).';%metabolite profiles    else        met_prof(:,i) = eval(char(compNames2(indexname(i))));    endend% parameter size correction : number_of_signals x number_of_componentsif size(amplsimul,2) ~= rCN    amplsimul=amplsimul.';endif size(dampsimul,2) ~= rCN    dampsimul=dampsimul.';endif size(phassimul,2) ~= rCN    phassimul=phassimul.';endif size(freqsimul,2) ~= rCN    freqsimul=freqsimul.';end% each signal is a rowif size(signal,2) ~= ndp    signal=signal.';endlsig = size(signal,1);eampl = zeros(lsig,rCN);edamp= zeros(lsig,rCN);efreq= zeros(lsig,rCN);ephas= zeros(lsig,rCN);egauss= zeros(lsig,rCN);eeddy= zeros(lsig,rCN);for i=1:lsig    % computation of the standard deviation of the noise given SNR and the reference peak    ppmrange = [(refpeak-0.2),refpeak+0.2];    [lmax,ppmind,ppmval] = localmax(signal(i,:),ppmrange,frequency,step,ndp);    stdnoise = lmax/SNR;    stdnoisesquare = stdnoise^2;    t = [begin:step:(ndp-1)*step];    % filter parameter initialization    filter_information = init_filter(type,flow,fhigh,signal(i,:),ripple,Morder,step,ndp);    % computation of the true Cramer Rao bounds    % gauss = [0...0]', eddy = [0...0]', loline=1, galine=0, voline=0    gauss = zeros(rCN,1);    eddy =  zeros(rCN,1);    [eampltemp,edamptemp,egausstemp,efreqtemp,ephastemp,eeddytemp] = calculate_CR_bounds(amplsimul(i,:),dampsimul(i,:),freqsimul(i,:),phassimul(i,:),gauss,eddy,t,stdnoisesquare,met_prof,...filter_information,1,0,0);eampl(i,:) = eampltemp.';edamp(i,:) = edamptemp.';efreq(i,:) = efreqtemp.';ephas(i,:) = ephastemp.';egauss(i,:)= egausstemp.';eeddy(i,:) = eeddytemp.';endmeanCRB = [mean(eampl,1); mean(ephas,1); mean(edamp,1); mean(efreq,1); mean(egauss,1); mean(eeddy,1)];CRB = [eampl; edamp; efreq; ephas; egauss; eeddy];meansimul = [mean(amplsimul,1); mean(phassimul,1); mean(dampsimul,1); mean(freqsimul,1)];% savingfid = fopen(filesavetof,'w');fidcode2 = ['\n %f \t\t %f \t\t %f \t\t %f \t\t %f \t\t %f'];fidcode3 = ['\n %s'];fidcode4 = ['\n %f \t\t %f \t\t %f \t\t %f'];for i=1:rCN    fprintf(fid,'%s \t\t',char(compNames1(i)));endfprintf(fid,fidcode3,'True CRB' );fprintf(fid,fidcode3,'amplitude phase damping frequency gauss eddycurrent' );fprintf(fid,fidcode2,meanCRB);fprintf(fid,fidcode3,'Simulated parameters');fprintf(fid,fidcode3,'amplitude phase damping frequency' );printf(fid,fidcode4,meansimul);fclose(fid);